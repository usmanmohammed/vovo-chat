{"Name":"OkHttp v3 Web Sockets","Id":2644,"Alias":"square.OkHttp3.ws","Description":"# OkHttp Web Sockets Details\n\n\u003e A **RFC6455**-compliant web socket implementation\n\n## Connecting\n\nWe can connect to a web socket using the `WebSocketCall` type with the usual `OkHttpClient` and `Request` types of OkHttp:\n\n    OkHttpClient client = new OkHttpClient();\n\n    // Create request for remote resource.\n    Request request = new Request.Builder()\n        .Url(Endpoint)\n        .Build();\n\n    // Execute the request and retrieve the response.\n    WebSocketCall call = WebSocketCall.Create(client, request);\n\n## Listening\n\nWe can use an event-based listener:\n\n    WebSocketListener listener = call.Enqueue();\n\tlistener.Open += (sender, e) =\u003e {\n\t\t// the socket was opened, so get the socket\n        var socket = e.WebSocket;\n\t};\n\t\nOr, we can implement the listener:\n\n    // connect and receive\n    call.Enqueue(new SocketListener());\n\t\n\t// the listener type\n\tclass SocketListener : Java.Lang.Object, IWebSocketListener\n\t{\n\t    public void OnClose(int code, string reason)\n\t\t{\n\t\t    // the connection was closed\n\t\t}\n\t\tpublic void OnFailure(Java.IO.IOException exception, Response response)\n\t\t{\n\t\t    // there was an error\n\t\t}\n\t\tpublic void OnMessage(IBufferedSource source, WebSocketPayloadType payloadType)\n\t\t{\n\t\t    // we received a message\n\t\t}\n\t\tpublic void OnOpen(IWebSocket socket, Response response)\n\t\t{\n\t\t    // the socket was opened\n\t\t}\n\t\tpublic void OnPong(OkBuffer buffer)\n\t\t{\n\t\t    // respond to a ping\n\t\t}\n\t}\n\t\n## Communicating\n\nUsing either the event-based listener or a custom implementation, we can access the open socket and start sending messages:\n\n\tpublic void OnOpen(IWebSocket socket, Response response)\n\t{\n\t\tvar buffer = new OkBuffer();\n\t\tbuffer.WriteString(\"Hello World!\", Charset.DefaultCharset());\n\t\tsocket.SendMessage(WebSocketPayloadType.Text, buffer);\n\t};\n\nWhen a message comes in from a remote source, we can handle it using either the event-based listener or a custom implementation:\n\n\tlistener.Message += (sender, e) =\u003e {\n\t    // read the contents\n\t    string payload = e.Payload.ReadString(Charset.DefaultCharset());\n\t\t\n\t\t// close the message\n\t\te.Payload.Close();\n\t};\n\t\n*Note: This module\u0027s API should be considered experimental and may be subject to breaking changes in future releases.*\n","Version":"3.2.0.0","Summary":"A RFC6455-compliant web socket implementation.","QuickStart":"# Getting Started with OkHttp Web Sockets\n\n\u003e A **RFC6455**-compliant web socket implementation\n\n## Connecting\n\nWe can connect to a web socket using the `WebSocketCall` type with the usual `OkHttpClient` and `Request` types of OkHttp:\n\n    OkHttpClient client = new OkHttpClient();\n\n    // Create request for remote resource.\n    Request request = new Request.Builder()\n        .Url(Endpoint)\n        .Build();\n\n    // Execute the request and retrieve the response.\n    WebSocketCall call = WebSocketCall.Create(client, request);\n\n## Listening\n\nWe can use an event-based listener:\n\n    WebSocketListener listener = call.Enqueue();\n\tlistener.Open += (sender, e) =\u003e {\n\t\t// the socket was opened, so get the socket\n        var socket = e.WebSocket;\n\t};\n\t\nOr, we can implement the listener:\n\n    // connect and receive\n    call.Enqueue(new SocketListener());\n\t\n\t// the listener type\n\tclass SocketListener : Java.Lang.Object, IWebSocketListener\n\t{\n\t    public void OnClose(int code, string reason)\n\t\t{\n\t\t    // the connection was closed\n\t\t}\n\t\tpublic void OnFailure(Java.IO.IOException exception, Response response)\n\t\t{\n\t\t    // there was an error\n\t\t}\n\t\tpublic void OnMessage(IBufferedSource source, WebSocketPayloadType payloadType)\n\t\t{\n\t\t    // we received a message\n\t\t}\n\t\tpublic void OnOpen(IWebSocket socket, Response response)\n\t\t{\n\t\t    // the socket was opened\n\t\t}\n\t\tpublic void OnPong(OkBuffer buffer)\n\t\t{\n\t\t    // respond to a ping\n\t\t}\n\t}\n\t\n## Communicating\n\nUsing either the event-based listener or a custom implementation, we can access the open socket and start sending messages:\n\n\tpublic void OnOpen(IWebSocket socket, Response response)\n\t{\n\t\tvar buffer = new OkBuffer();\n\t\tbuffer.WriteString(\"Hello World!\", Charset.DefaultCharset());\n\t\tsocket.SendMessage(WebSocketPayloadType.Text, buffer);\n\t};\n\nWhen a message comes in from a remote source, we can handle it using either the event-based listener or a custom implementation:\n\n\tlistener.Message += (sender, e) =\u003e {\n\t    // read the contents\n\t    string payload = e.Payload.ReadString(Charset.DefaultCharset());\n\t\t\n\t\t// close the message\n\t\te.Payload.Close();\n\t};\n\t\n*Note: This module\u0027s API should be considered experimental and may be subject to breaking changes in future releases.*\n","Hash":"f6594ef790eabd6c63a49e95294a4b27","TargetPlatforms":["android"],"TrialHash":null}